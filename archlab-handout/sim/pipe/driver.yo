                            | #######################################################################
                            | # Test for copying block of size 1;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4f803000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20100000000000000 | 	irmovq $1, %rdx		# src and dst have 1 elements
0x014: 30f66803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f74803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80dc01000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: c0f2fcffffffffffffff | 	iaddq $-4,%rdx
0x047: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x049: 71db01000000000000   | 	jle Done		# if so, goto Done:
                            | 
0x052: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# read val from src...
0x05c: 50b70800000000000000 | 	mrmovq 8(%rdi),%r11
0x066: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x070: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x072: 718500000000000000   | 	jle Npos		# if so, goto Npos:
0x07b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x085:                      | Npos:	
0x085: 40b60800000000000000 | 	rmmovq %r11,8(%rsi)
0x08f: 62bb                 | 	andq %r11,%r11
0x091: 71a400000000000000   | 	jle Npos1
0x09a: c0f00100000000000000 | 	iaddq $1, %rax
0x0a4:                      | Npos1:
0x0a4: 50a71000000000000000 | 	mrmovq 16(%rdi),%r10
0x0ae: 50b71800000000000000 | 	mrmovq 24(%rdi),%r11	
0x0b8: 40a61000000000000000 | 	rmmovq %r10,16(%rsi)
0x0c2: 62aa                 | 	andq  %r10,%r10
0x0c4: 71d700000000000000   | 	jle Npos2
0x0cd: c0f00100000000000000 | 	iaddq $1,%rax
0x0d7:                      | Npos2:
0x0d7: 40b61800000000000000 | 	rmmovq %r11,24(%rsi)
0x0e1: 62bb                 | 	andq %r11,%r11
0x0e3: 71f600000000000000   | 	jle judge
0x0ec: c0f00100000000000000 | 	iaddq $1,%rax
0x0f6:                      | judge:
0x0f6: c0f72000000000000000 | 	iaddq $32,%rdi
0x100: c0f62000000000000000 | 	iaddq $32,%rsi
0x10a: c0f2fcffffffffffffff | 	iaddq $-4,%rdx
0x114: 755200000000000000   | 	jge Loop
                            | 
0x11d:                      | newLoop:
0x11d: c0f20400000000000000 | 	iaddq $4,%rdx #get the real len
0x127: c0f2ffffffffffffffff | 	iaddq $-1,%rdx
0x131: 72db01000000000000   | 	jl Done
0x13a: 50a70000000000000000 | 	mrmovq (%rdi),%r10
0x144: 50b70800000000000000 | 	mrmovq 8(%rdi),%r11
0x14e: 40a60000000000000000 | 	rmmovq %r10,(%rsi)
0x158: 62aa                 | 	andq %r10,%r10
0x15a: 716d01000000000000   | 	jle Npos3
0x163: c0f00100000000000000 | 	iaddq $1,%rax
0x16d:                      | Npos3:
0x16d: c0f2ffffffffffffffff | 	iaddq $-1,%rdx
0x177: 72db01000000000000   | 	jl Done
0x180: 40b60800000000000000 | 	rmmovq %r11,8(%rsi)
0x18a: 62bb                 | 	andq %r11,%r11
0x18c: 719f01000000000000   | 	jle Npos4:
0x195: c0f00100000000000000 | 	iaddq $1,%rax
0x19f:                      | Npos4:
0x19f: c0f2ffffffffffffffff | 	iaddq $-1,%rdx
0x1a9: 72db01000000000000   | 	jl Done
0x1b2: 50a71000000000000000 | 	mrmovq 16(%rdi),%r10
0x1bc: 40a61000000000000000 | 	rmmovq %r10,16(%rsi)
0x1c6: 62aa                 | 	andq %r10,%r10
0x1c8: 71db01000000000000   | 	jle Done:
0x1d1: c0f00100000000000000 | 	iaddq $1,%rax
                            | 	
                            | 	
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1db:                      | Done:
0x1db: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1dc:                      | End:
                            | #/* $end ncopy-ys */
0x1dc:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x1dc:                      | check:
                            | 	# Return value test
0x1dc: 30fa0000000000000000 | 	irmovq $0,%r10
0x1e6: 61a0                 | 	subq %r10,%rax
0x1e8: 730402000000000000   | 	je checkb
0x1f1: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x1fb: 704203000000000000   | 	jmp cdone
0x204:                      | checkb:
                            | 	# Code length check
0x204: 30f0dc01000000000000 | 	irmovq EndFun,%rax
0x20e: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x218: 6120                 | 	subq %rdx,%rax
0x21a: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x224: 6102                 | 	subq %rax,%rdx
0x226: 754202000000000000   | 	jge checkm
0x22f: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x239: 704203000000000000   | 	jmp cdone
0x242:                      | checkm:
0x242: 30f26803000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x24c: 30f34803000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x256: 30f70100000000000000 | 	irmovq $1,%rdi  # Count
0x260: 6277                 | 	andq %rdi,%rdi
0x262: 73c002000000000000   | 	je checkpre         # Skip check if count = 0
0x26b:                      | mcloop:
0x26b: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x275: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x27f: 6160                 | 	subq %rsi,%rax
0x281: 739d02000000000000   | 	je  mok
0x28a: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x294: 704203000000000000   | 	jmp cdone
0x29d:                      | mok:
0x29d: 30f00800000000000000 | 	irmovq $8,%rax
0x2a7: 6002                 | 	addq %rax,%rdx	  # dest ++
0x2a9: 6003                 | 	addq %rax,%rbx    # src++
0x2ab: 30f00100000000000000 | 	irmovq $1,%rax
0x2b5: 6107                 | 	subq %rax,%rdi    # cnt--
0x2b7: 766b02000000000000   | 	jg mcloop
0x2c0:                      | checkpre:
                            | 	# Check for corruption
0x2c0: 30f26003000000000000 | 	irmovq Predest,%rdx
0x2ca: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x2d4: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x2de: 6120                 | 	subq %rdx,%rax
0x2e0: 73fc02000000000000   | 	je checkpost
0x2e9: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x2f3: 704203000000000000   | 	jmp cdone
0x2fc:                      | checkpost:
                            | 	# Check for corruption
0x2fc: 30f27003000000000000 | 	irmovq Postdest,%rdx
0x306: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x310: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x31a: 6120                 | 	subq %rdx,%rax
0x31c: 733803000000000000   | 	je checkok
0x325: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x32f: 704203000000000000   | 	jmp cdone
0x338:                      | checkok:
                            | 	# Successful checks
0x338: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x342:                      | cdone:
0x342: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x348:                      | 	.align 8
0x348:                      | src:
0x348: ffffffffffffffff     | 	.quad -1
0x350: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x360:                      | 	.align 16
0x360:                      | Predest:
0x360: fadebc0000000000     | 	.quad 0xbcdefa
0x368:                      | dest:
0x368: abefcd0000000000     | 	.quad 0xcdefab
0x370:                      | Postdest:
0x370: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x378:                      | .align 8
                            | # Run time stack
0x378: 0000000000000000     | 	.quad 0
0x380: 0000000000000000     | 	.quad 0
0x388: 0000000000000000     | 	.quad 0
0x390: 0000000000000000     | 	.quad 0
0x398: 0000000000000000     | 	.quad 0
0x3a0: 0000000000000000     | 	.quad 0
0x3a8: 0000000000000000     | 	.quad 0
0x3b0: 0000000000000000     | 	.quad 0
0x3b8: 0000000000000000     | 	.quad 0
0x3c0: 0000000000000000     | 	.quad 0
0x3c8: 0000000000000000     | 	.quad 0
0x3d0: 0000000000000000     | 	.quad 0
0x3d8: 0000000000000000     | 	.quad 0
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
                            | 
0x3f8:                      | Stack:
